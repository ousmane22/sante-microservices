pipeline {
    agent any
    
    environment {
        DOCKER_REGISTRY = 'localhost:5000'
        TRIVY_SEVERITY = 'HIGH,CRITICAL'
        TRIVY_EXIT_CODE = '1'
    }

    stages {
        stage('üèóÔ∏è Build Docker Images') {
            parallel {
                stage('Build Medecin Service') {
                    steps {
                        script {
                            def image = docker.build("${DOCKER_REGISTRY}/medecin-service:${BUILD_NUMBER}", "./medecin-service")
                            env.MEDECIN_IMAGE = "${DOCKER_REGISTRY}/medecin-service:${BUILD_NUMBER}"
                        }
                    }
                }
                stage('Build Patient Service') {
                    steps {
                        script {
                            def image = docker.build("${DOCKER_REGISTRY}/patient-service:${BUILD_NUMBER}", "./patient-service")
                            env.PATIENT_IMAGE = "${DOCKER_REGISTRY}/patient-service:${BUILD_NUMBER}"
                        }
                    }
                }
                stage('Build RDV Service') {
                    steps {
                        script {
                            def image = docker.build("${DOCKER_REGISTRY}/rdv-service:${BUILD_NUMBER}", "./rdv-service")
                            env.RDV_IMAGE = "${DOCKER_REGISTRY}/rdv-service:${BUILD_NUMBER}"
                        }
                    }
                }
                stage('Build Dossier Service') {
                    steps {
                        script {
                            def image = docker.build("${DOCKER_REGISTRY}/dossier-service:${BUILD_NUMBER}", "./dossier-service")
                            env.DOSSIER_IMAGE = "${DOCKER_REGISTRY}/dossier-service:${BUILD_NUMBER}"
                        }
                    }
                }
                stage('Build Gateway') {
                    steps {
                        script {
                            def image = docker.build("${DOCKER_REGISTRY}/gateway:${BUILD_NUMBER}", "./gateway")
                            env.GATEWAY_IMAGE = "${DOCKER_REGISTRY}/gateway:${BUILD_NUMBER}"
                        }
                    }
                }
            }
        }

        stage('üîí Security Scans') {
            parallel {
                stage('Trivy - Vulnerability Scan') {
                    steps {
                        script {
                            def images = [
                                env.MEDECIN_IMAGE,
                                env.PATIENT_IMAGE,
                                env.RDV_IMAGE,
                                env.DOSSIER_IMAGE,
                                env.GATEWAY_IMAGE
                            ]

                            images.each { imageName ->
                                if (imageName) {
                                    echo "üîç Scanning ${imageName} with Trivy..."

                                    // Scan de vuln√©rabilit√©s
                                    sh """
                                        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \\
                                        aquasec/trivy:latest image \\
                                        --format json \\
                                        --output ${imageName.split(':')[0].split('/')[1]}-trivy-report.json \\
                                        --severity ${TRIVY_SEVERITY} \\
                                        ${imageName}
                                    """

                                    // Scan avec seuil d'√©chec
                                    sh """
                                        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \\
                                        aquasec/trivy:latest image \\
                                        --severity ${TRIVY_SEVERITY} \\
                                        --exit-code ${TRIVY_EXIT_CODE} \\
                                        ${imageName}
                                    """
                                }
                            }
                        }
                    }
                    post {
                        always {
                            // Archiver les rapports Trivy
                            archiveArtifacts artifacts: '*-trivy-report.json', allowEmptyArchive: true

                            // Publier les rapports HTML
                            publishHTML([
                                allowMissing: false,
                                alwaysLinkToLastBuild: true,
                                keepAll: true,
                                reportDir: '.',
                                reportFiles: '*-trivy-report.json',
                                reportName: 'Trivy Security Reports'
                            ])
                        }
                    }
                }

                stage('Docker Scout - Advanced Scan') {
                    steps {
                        script {
                            def images = [
                                env.MEDECIN_IMAGE,
                                env.PATIENT_IMAGE,
                                env.RDV_IMAGE,
                                env.DOSSIER_IMAGE,
                                env.GATEWAY_IMAGE
                            ]

                            images.each { imageName ->
                                if (imageName) {
                                    echo "üîç Scanning ${imageName} with Docker Scout..."
                                    sh """
                                        docker scout cves ${imageName} \\
                                        --format json \\
                                        --output ${imageName.split(':')[0].split('/')[1]}-scout-report.json || true
                                    """
                                }
                            }
                        }
                    }
                }

                stage('Grype - Additional Scan') {
                    steps {
                        script {
                            def images = [
                                env.MEDECIN_IMAGE,
                                env.PATIENT_IMAGE,
                                env.RDV_IMAGE,
                                env.DOSSIER_IMAGE,
                                env.GATEWAY_IMAGE
                            ]

                            images.each { imageName ->
                                if (imageName) {
                                    echo "üîç Scanning ${imageName} with Grype..."
                                    sh """
                                        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \\
                                        anchore/grype:latest ${imageName} \\
                                        -o json > ${imageName.split(':')[0].split('/')[1]}-grype-report.json || true
                                    """
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('üìä Security Report Analysis') {
            steps {
                script {
                    echo 'üìã Analyzing security scan results...'

                    // Compter les vuln√©rabilit√©s par service
                    sh '''
                        echo "üîç SECURITY SCAN SUMMARY:"
                        echo "========================"

                        for report in *-trivy-report.json; do
                            if [ -f "$report" ]; then
                                service=$(echo $report | sed 's/-trivy-report.json//')
                                critical=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' $report 2>/dev/null || echo "0")
                                high=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length' $report 2>/dev/null || echo "0")

                                echo "üì¶ $service:"
                                echo "  üî¥ Critical: $critical"
                                echo "  üü† High: $high"
                                echo ""
                            fi
                        done

                        echo "üìä Overall Security Status:"
                        total_critical=$(jq -s 'map(.[].Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")) | length' *-trivy-report.json 2>/dev/null || echo "0")
                        total_high=$(jq -s 'map(.[].Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")) | length' *-trivy-report.json 2>/dev/null || echo "0")

                        echo "üî¥ Total Critical: $total_critical"
                        echo "üü† Total High: $total_high"

                        if [ "$total_critical" -gt 0 ]; then
                            echo "‚ùå SECURITY GATE: FAILED - Critical vulnerabilities found"
                            exit 1
                        elif [ "$total_high" -gt 5 ]; then
                            echo "‚ö†Ô∏è SECURITY GATE: WARNING - Too many high severity vulnerabilities"
                        else
                            echo "‚úÖ SECURITY GATE: PASSED - No critical issues"
                        fi
                    '''
                }
            }
        }

        stage('üöÄ Deploy Secure Images') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                echo 'üöÄ Deploying security-approved images...'
                sh '''
                    echo "Images passed security scanning:"
                    echo "‚úÖ ${MEDECIN_IMAGE}"
                    echo "‚úÖ ${PATIENT_IMAGE}"
                    echo "‚úÖ ${RDV_IMAGE}"
                    echo "‚úÖ ${DOSSIER_IMAGE}"
                    echo "‚úÖ ${GATEWAY_IMAGE}"

                    # D√©ploiement avec docker-compose
                    docker-compose down
                    docker-compose up -d
                '''
            }
        }
    }

    post {
        always {
            // Nettoyer les images temporaires
            sh 'docker system prune -f'

            // Archiver tous les rapports de s√©curit√©
            archiveArtifacts artifacts: '*-*-report.json', allowEmptyArchive: true
        }

        success {
            echo """
            üéâ ===== SECURITY PIPELINE SUCCESS =====
            ‚úÖ All images built successfully
            ‚úÖ Security scans completed
            ‚úÖ No critical vulnerabilities found
            ‚úÖ Images deployed securely

            üìä Security Reports Available:
            ‚Ä¢ Trivy vulnerability reports
            ‚Ä¢ Docker Scout analysis
            ‚Ä¢ Grype additional scanning

            üîó Access security dashboards for detailed analysis
            ====================================
            """
        }

        failure {
            echo """
            ‚ùå ===== SECURITY PIPELINE FAILED =====
            üîç Security vulnerabilities detected
            üìã Review security reports for details
            üõ†Ô∏è Fix vulnerabilities before deployment

            üìä Check archived security reports
            ===================================
            """
        }
    }
}