services:
  consul:
    image: hashicorp/consul:latest
    container_name: consul-server
    command: "agent -server -ui -node=consul-server -bootstrap-expect=1 -client=0.0.0.0"
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    volumes:
      - consul-data:/consul/data
    networks:
      - consul-network
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8500/v1/status/leader || exit 1" ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  ## Prometheus
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    networks:
      - consul-network
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  ## Tempo
  tempo:
    image: grafana/tempo
    container_name: tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./docker/tempo/tempo.yml:/etc/tempo.yaml:ro
      - ./docker/tempo/tempo-data:/tmp/tempo
    ports:
      - "3200:3200" # Tempo
      - "9411:9411" # zipkin
    networks:
      - consul-network

  ## Loki
  loki:
    image: grafana/loki:main
    container_name: loki
    command: [ "-config.file=/etc/loki/local-config.yaml" ]
    ports:
      - "3100:3100"
    networks:
      - consul-network

  ## grafana
  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./docker/grafana:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
    networks:
      - consul-network

  medecin-service:
    build: ./medecin-service
    container_name: medecin-service
    ports:
      - "7070:7070"
    networks:
      - consul-network
    environment:
      SPRING_CLOUD_CONSUL_HOST: consul
      SPRING_CLOUD_CONSUL_DISCOVERY_HOSTNAME: medecin-service
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:7070/actuator/health" ]
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      - consul
      - tempo
      - loki
    restart: always

  patient-service:
    build: ./patient-service
    container_name: patient-service
    ports:
      - "8081:8081"
    networks:
      - consul-network
    environment:
      SPRING_CLOUD_CONSUL_HOST: consul
      SPRING_CLOUD_CONSUL_DISCOVERY_HOSTNAME: patient-service
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/actuator/health" ]
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      - consul
      - tempo
      - loki
    restart: always

  rdv-service:
    build: ./rdv-service
    container_name: rdv-service
    ports:
      - "8086:8082"
    networks:
      - consul-network
    environment:
      SPRING_CLOUD_CONSUL_HOST: consul
      SPRING_CLOUD_CONSUL_DISCOVERY_HOSTNAME: rdv-service
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8082/actuator/health" ]
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      - consul
      - tempo
      - loki
    restart: always

  dossier-service:
    build: ./dossier-service
    container_name: dossier-service
    ports:
      - "8083:8083"
    networks:
      - consul-network
    environment:
      SPRING_CLOUD_CONSUL_HOST: consul
      SPRING_CLOUD_CONSUL_DISCOVERY_HOSTNAME: dossier-service
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8083/actuator/health" ]
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      - consul
      - tempo
      - loki
    restart: always

  gateway:
    build: ./gateway
    container_name: gateway
    ports:
      - "9999:9999"
    networks:
      - consul-network
    environment:
      SPRING_CLOUD_CONSUL_HOST: consul
      SPRING_CLOUD_CONSUL_DISCOVERY_HOSTNAME: gateway
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9999/actuator/health" ]
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      - consul
      - tempo
      - loki
    restart: always

  keycloak:
    container_name: keycloak
    image: keycloak/keycloak:26.0
    command: [ "start-dev", "--import-realm" ]
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HTTP_ENABLED: true
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
    ports:
      - "8080:8080"
    volumes:
      # Import des realms (lecture seule)
      - ./keycloak/realms/:/opt/keycloak/data/import/:ro
      # PERSISTANCE - c'est Ã§a qui sauvegarde vos realms
      - keycloak_data:/opt/keycloak/data/
    networks:
      - consul-network
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8080/health/ready || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped


  sonarqube:
    image: sonarqube:community
    container_name: sonarqube
    ports:
      - "9000:9000"
    environment:
      - SONAR_JDBC_URL=jdbc:postgresql://postgres-sonar:5432/sonar
      - SONAR_JDBC_USERNAME=sonar
      - SONAR_JDBC_PASSWORD=sonar
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    networks:
      - consul-network
    depends_on:
      - postgres-sonar

  postgres-sonar:
    image: postgres:13
    container_name: postgres-sonar
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
      - POSTGRES_DB=sonar
    volumes:
      - postgresql_sonar:/var/lib/postgresql/data
    networks:
      - consul-network

  jenkins:
    image: jenkins/jenkins:lts
    container_name: jenkins
    ports:
      - "8090:8080"
      - "50000:50000"
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DOCKER_HOST=unix:///var/run/docker.sock
    networks:
      - consul-network
    user: root

  trivy:
    image: aquasec/trivy:latest
    container_name: trivy-scanner
    command: [ "server", "--listen", "0.0.0.0:8087" ]
    ports:
      - "8087:8087"
    volumes:
      - trivy-cache:/root/.cache/trivy
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - consul-network
    restart: unless-stopped

volumes:
  consul-data:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  postgresql_sonar:
  jenkins_home:
  keycloak_data:
  trivy-cache:
    driver: local


networks:
  consul-network:
    driver: bridge
  keycloak:
    driver: local